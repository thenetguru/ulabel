<?php

/**
 * This is the model base class for the table "{{Address}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Address".
 *
 * Columns in table "{{Address}}" available as properties of the model,
 * followed by relations of table "{{Address}}" available as properties of the model.
 *
 * @property integer $id
 * @property integer $branchID
 * @property string $line1
 * @property string $line2
 * @property string $line3
 * @property string $line4
 * @property string $postcode
 * @property string $telephone
 * @property string $fax
 * @property string $email
 * @property integer $countryID
 *
 * @property Country $country
 * @property Branch $branch
 * @property BranchBranchType[] $branchBranchTypes
 * @property BranchBranchType[] $branchBranchTypes1
 * @property Label[] $labels
 * @property Label[] $labels1
 * @property Order[] $orders
 * @property Order[] $orders1
 * @property Order[] $orders2
 * @property Order[] $orders3
 */
abstract class BaseAddress extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{Address}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Address|Addresses', $n);
	}

	public static function representingColumn() {
		return 'line1';
	}

	public function rules() {
		return array(
			array('branchID, countryID', 'numerical', 'integerOnly'=>true),
			array('line1, line2, line3, line4, postcode, telephone, fax, email', 'length', 'max'=>20),
			array('branchID, line1, line2, line3, line4, postcode, telephone, fax, email, countryID', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, branchID, line1, line2, line3, line4, postcode, telephone, fax, email, countryID', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'country' => array(self::BELONGS_TO, 'Country', 'countryID'),
			'branch' => array(self::BELONGS_TO, 'Branch', 'branchID'),
			'branchBranchTypes' => array(self::HAS_MANY, 'BranchBranchType', 'invoiceAddressID'),
			'branchBranchTypes1' => array(self::HAS_MANY, 'BranchBranchType', 'deliveryAddressID'),
			'labels' => array(self::HAS_MANY, 'Label', 'currentAddressID'),
			'labels1' => array(self::HAS_MANY, 'Label', 'destinationAddressID'),
			'orders' => array(self::HAS_MANY, 'Order', 'invoiceAddressID'),
			'orders1' => array(self::HAS_MANY, 'Order', 'srcID'),
			'orders2' => array(self::HAS_MANY, 'Order', 'dstID'),
			'orders3' => array(self::HAS_MANY, 'Order', 'deliveryAddressID'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'branchID' => null,
			'line1' => Yii::t('app', 'Line1'),
			'line2' => Yii::t('app', 'Line2'),
			'line3' => Yii::t('app', 'Line3'),
			'line4' => Yii::t('app', 'Line4'),
			'postcode' => Yii::t('app', 'Postcode'),
			'telephone' => Yii::t('app', 'Telephone'),
			'fax' => Yii::t('app', 'Fax'),
			'email' => Yii::t('app', 'Email'),
			'countryID' => null,
			'country' => null,
			'branch' => null,
			'branchBranchTypes' => null,
			'branchBranchTypes1' => null,
			'labels' => null,
			'labels1' => null,
			'orders' => null,
			'orders1' => null,
			'orders2' => null,
			'orders3' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('branchID', $this->branchID);
		$criteria->compare('line1', $this->line1, true);
		$criteria->compare('line2', $this->line2, true);
		$criteria->compare('line3', $this->line3, true);
		$criteria->compare('line4', $this->line4, true);
		$criteria->compare('postcode', $this->postcode, true);
		$criteria->compare('telephone', $this->telephone, true);
		$criteria->compare('fax', $this->fax, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('countryID', $this->countryID);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}