<?php

/**
 * This is the model base class for the table "{{SupportMessage}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "SupportMessage".
 *
 * Columns in table "{{SupportMessage}}" available as properties of the model,
 * followed by relations of table "{{SupportMessage}}" available as properties of the model.
 *
 * @property integer $id
 * @property integer $supportID
 * @property integer $userID
 * @property string $content
 * @property string $created
 *
 * @property User $user
 * @property Support $support
 */
abstract class BaseSupportMessage extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{SupportMessage}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'SupportMessage|SupportMessages', $n);
	}

	public static function representingColumn() {
		return 'content';
	}

	public function rules() {
		return array(
			array('supportID, userID', 'numerical', 'integerOnly'=>true),
			array('content, created', 'safe'),
			array('supportID, userID, content, created', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, supportID, userID, content, created', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'user' => array(self::BELONGS_TO, 'User', 'userID'),
			'support' => array(self::BELONGS_TO, 'Support', 'supportID'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'supportID' => null,
			'userID' => null,
			'content' => Yii::t('app', 'Content'),
			'created' => Yii::t('app', 'Created'),
			'user' => null,
			'support' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('supportID', $this->supportID);
		$criteria->compare('userID', $this->userID);
		$criteria->compare('content', $this->content, true);
		$criteria->compare('created', $this->created, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}