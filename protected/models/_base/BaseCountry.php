<?php

/**
 * This is the model base class for the table "{{Country}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Country".
 *
 * Columns in table "{{Country}}" available as properties of the model,
 * followed by relations of table "{{Country}}" available as properties of the model.
 *
 * @property integer $id
 * @property string $name
 * @property string $iso
 * @property integer $priority
 * @property integer $sticky
 * @property integer $currencyID
 *
 * @property Address[] $addresses
 * @property Currency $currency
 */
abstract class BaseCountry extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{Country}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Country|Countries', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('priority, sticky, currencyID', 'numerical', 'integerOnly'=>true),
			array('name', 'length', 'max'=>120),
			array('iso', 'length', 'max'=>2),
			array('name, iso, priority, sticky, currencyID', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, name, iso, priority, sticky, currencyID', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'addresses' => array(self::HAS_MANY, 'Address', 'countryID'),
			'currency' => array(self::BELONGS_TO, 'Currency', 'currencyID'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'name' => Yii::t('app', 'Name'),
			'iso' => Yii::t('app', 'Iso'),
			'priority' => Yii::t('app', 'Priority'),
			'sticky' => Yii::t('app', 'Sticky'),
			'currencyID' => null,
			'addresses' => null,
			'currency' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('iso', $this->iso, true);
		$criteria->compare('priority', $this->priority);
		$criteria->compare('sticky', $this->sticky);
		$criteria->compare('currencyID', $this->currencyID);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}