<?php

/**
 * This is the model base class for the table "{{LabelType}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "LabelType".
 *
 * Columns in table "{{LabelType}}" available as properties of the model,
 * followed by relations of table "{{LabelType}}" available as properties of the model.
 *
 * @property integer $id
 * @property integer $parentID
 * @property string $name
 * @property integer $length
 * @property integer $maxChildren
 * @property integer $priority
 *
 * @property Label[] $labels
 * @property LabelType $parent
 * @property LabelType[] $labelTypes
 */
abstract class BaseLabelType extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{LabelType}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'LabelType|LabelTypes', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('parentID, length, maxChildren, priority', 'numerical', 'integerOnly'=>true),
			array('name', 'length', 'max'=>20),
			array('parentID, name, length, maxChildren, priority', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, parentID, name, length, maxChildren, priority', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'labels' => array(self::HAS_MANY, 'Label', 'labelTypeID'),
			'parent' => array(self::BELONGS_TO, 'LabelType', 'parentID'),
			'labelTypes' => array(self::HAS_MANY, 'LabelType', 'parentID'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'parentID' => null,
			'name' => Yii::t('app', 'Name'),
			'length' => Yii::t('app', 'Length'),
			'maxChildren' => Yii::t('app', 'Max Children'),
			'priority' => Yii::t('app', 'Priority'),
			'labels' => null,
			'parent' => null,
			'labelTypes' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('parentID', $this->parentID);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('length', $this->length);
		$criteria->compare('maxChildren', $this->maxChildren);
		$criteria->compare('priority', $this->priority);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}