<?php

/**
 * This is the model base class for the table "{{BranchBranchType}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "BranchBranchType".
 *
 * Columns in table "{{BranchBranchType}}" available as properties of the model,
 * followed by relations of table "{{BranchBranchType}}" available as properties of the model.
 *
 * @property integer $id
 * @property integer $branchID
 * @property integer $branchTypeID
 * @property integer $deliveryAddressID
 * @property integer $invoiceAddressID
 *
 * @property Address $invoiceAddress
 * @property Branch $branch
 * @property BranchType $branchType
 * @property Address $deliveryAddress
 * @property mixed $ulUsers
 */
abstract class BaseBranchBranchType extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{BranchBranchType}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'BranchBranchType|BranchBranchTypes', $n);
	}

	public static function representingColumn() {
		return array(
			'id',
			'branchID',
			'branchTypeID',
		);
	}

	public function rules() {
		return array(
			array('branchID, branchTypeID, deliveryAddressID, invoiceAddressID', 'numerical', 'integerOnly'=>true),
			array('branchID, branchTypeID, deliveryAddressID, invoiceAddressID', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, branchID, branchTypeID, deliveryAddressID, invoiceAddressID', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'invoiceAddress' => array(self::BELONGS_TO, 'Address', 'invoiceAddressID'),
			'branch' => array(self::BELONGS_TO, 'Branch', 'branchID'),
			'branchType' => array(self::BELONGS_TO, 'BranchType', 'branchTypeID'),
			'deliveryAddress' => array(self::BELONGS_TO, 'Address', 'deliveryAddressID'),
			'ulUsers' => array(self::MANY_MANY, 'User', '{{UserBranchType}}(branchBranchTypeID, userID)'),
		);
	}

	public function pivotModels() {
		return array(
			'ulUsers' => 'UserBranchType',
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'branchID' => null,
			'branchTypeID' => null,
			'deliveryAddressID' => null,
			'invoiceAddressID' => null,
			'invoiceAddress' => null,
			'branch' => null,
			'branchType' => null,
			'deliveryAddress' => null,
			'ulUsers' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('branchID', $this->branchID);
		$criteria->compare('branchTypeID', $this->branchTypeID);
		$criteria->compare('deliveryAddressID', $this->deliveryAddressID);
		$criteria->compare('invoiceAddressID', $this->invoiceAddressID);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}