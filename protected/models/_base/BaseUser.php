<?php

/**
 * This is the model base class for the table "{{User}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "User".
 *
 * Columns in table "{{User}}" available as properties of the model,
 * followed by relations of table "{{User}}" available as properties of the model.
 *
 * @property integer $id
 * @property string $fname
 * @property string $lname
 * @property string $email
 * @property string $pword
 * @property integer $canForceDelivery
 * @property integer $active
 *
 * @property Order[] $orders
 * @property SupportMessage[] $supportMessages
 * @property mixed $ulBranches
 * @property mixed $ulBranchBranchTypes
 */
abstract class BaseUser extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{User}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'User|Users', $n);
	}

	public static function representingColumn() {
		return 'fname';
	}

	public function rules() {
		return array(
			array('canForceDelivery, active', 'numerical', 'integerOnly'=>true),
			array('fname, lname, pword', 'length', 'max'=>20),
			array('email', 'length', 'max'=>120),
			array('fname, lname, email, pword, canForceDelivery, active', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, fname, lname, email, pword, canForceDelivery, active', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'orders' => array(self::HAS_MANY, 'Order', 'userID'),
			'supportMessages' => array(self::HAS_MANY, 'SupportMessage', 'userID'),
			'ulBranches' => array(self::MANY_MANY, 'Branch', '{{UserBranch}}(userID, branchID)'),
			'ulBranchBranchTypes' => array(self::MANY_MANY, 'BranchBranchType', '{{UserBranchType}}(userID, branchBranchTypeID)'),
		);
	}

	public function pivotModels() {
		return array(
			'ulBranches' => 'UserBranch',
			'ulBranchBranchTypes' => 'UserBranchType',
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'fname' => Yii::t('app', 'Fname'),
			'lname' => Yii::t('app', 'Lname'),
			'email' => Yii::t('app', 'Email'),
			'pword' => Yii::t('app', 'Pword'),
			'canForceDelivery' => Yii::t('app', 'Can Force Delivery'),
			'active' => Yii::t('app', 'Active'),
			'orders' => null,
			'supportMessages' => null,
			'ulBranches' => null,
			'ulBranchBranchTypes' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('fname', $this->fname, true);
		$criteria->compare('lname', $this->lname, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('pword', $this->pword, true);
		$criteria->compare('canForceDelivery', $this->canForceDelivery);
		$criteria->compare('active', $this->active);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}