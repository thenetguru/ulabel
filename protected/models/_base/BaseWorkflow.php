<?php

/**
 * This is the model base class for the table "{{Workflow}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Workflow".
 *
 * Columns in table "{{Workflow}}" available as properties of the model,
 * followed by relations of table "{{Workflow}}" available as properties of the model.
 *
 * @property integer $id
 * @property integer $branchTypeID
 * @property integer $nextBranchTypeID
 * @property integer $priority
 * @property integer $active
 *
 * @property BranchType $nextBranchType
 * @property BranchType $branchType
 */
abstract class BaseWorkflow extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{Workflow}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Workflow|Workflows', $n);
	}

	public static function representingColumn() {
		return 'id';
	}

	public function rules() {
		return array(
			array('branchTypeID, nextBranchTypeID, priority, active', 'numerical', 'integerOnly'=>true),
			array('branchTypeID, nextBranchTypeID, priority, active', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, branchTypeID, nextBranchTypeID, priority, active', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'nextBranchType' => array(self::BELONGS_TO, 'BranchType', 'nextBranchTypeID'),
			'branchType' => array(self::BELONGS_TO, 'BranchType', 'branchTypeID'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'branchTypeID' => null,
			'nextBranchTypeID' => null,
			'priority' => Yii::t('app', 'Priority'),
			'active' => Yii::t('app', 'Active'),
			'nextBranchType' => null,
			'branchType' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('branchTypeID', $this->branchTypeID);
		$criteria->compare('nextBranchTypeID', $this->nextBranchTypeID);
		$criteria->compare('priority', $this->priority);
		$criteria->compare('active', $this->active);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}