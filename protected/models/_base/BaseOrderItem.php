<?php

/**
 * This is the model base class for the table "{{OrderItem}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "OrderItem".
 *
 * Columns in table "{{OrderItem}}" available as properties of the model,
 * followed by relations of table "{{OrderItem}}" available as properties of the model.
 *
 * @property integer $id
 * @property integer $orderID
 * @property integer $labelID
 * @property integer $quantity
 * @property string $created
 *
 * @property Label $label
 * @property Order $order
 */
abstract class BaseOrderItem extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{OrderItem}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'OrderItem|OrderItems', $n);
	}

	public static function representingColumn() {
		return 'created';
	}

	public function rules() {
		return array(
			array('orderID, labelID, quantity', 'numerical', 'integerOnly'=>true),
			array('created', 'safe'),
			array('orderID, labelID, quantity, created', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, orderID, labelID, quantity, created', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'label' => array(self::BELONGS_TO, 'Label', 'labelID'),
			'order' => array(self::BELONGS_TO, 'Order', 'orderID'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'orderID' => null,
			'labelID' => null,
			'quantity' => Yii::t('app', 'Quantity'),
			'created' => Yii::t('app', 'Created'),
			'label' => null,
			'order' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('orderID', $this->orderID);
		$criteria->compare('labelID', $this->labelID);
		$criteria->compare('quantity', $this->quantity);
		$criteria->compare('created', $this->created, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}